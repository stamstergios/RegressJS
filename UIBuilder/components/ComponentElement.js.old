const UIBuilder = require('../index').UIBuilder;

class ComponentElement {
	//TODO: Check if, when `instantiate` is true, the tagname belongs to the COMPONENTS_TREE!
	//i.e. We cannot instantiate the native elements like div etc


	//TODO: Implement a appendTo() method.

	static UI_COMPONENT_FORM = 'x-UIComponent-Form';
	static UI_COMPONENT_FORM_SETTING = "x-UIComponent-Form-Setting";
	static UI_COMPONENT_MODAL = "x-UIComponent-Modal";
	static UI_COMPONENT_TABLE = "x-UIComponent-Table";
	static UI_COMPONENT_PAGE = "x-UIComponent-Page";
	static UI_COMPONENT_SPA = "x-UIComponent-SPA";

	constructor(tag, innerHTML, defaultState, eventListeners, instantiate, data) {
		this.tag = tag;
		this.innerHTML = innerHTML;
		this.states = {};
		this.eventListeners = eventListeners;
		this.instance;
		this.data = data;

		this.currentState = 'default';
		this.defineState('default', defaultState || {});
		this.element = document.createElement(this.tag);
		this.element.innerHTML = this.innerHTML;
		this._putState('default');
		if (this.eventListeners) {
			for (let key in this.eventListeners) {
				let eventNames = key.trim().split(',');
				for (let eventName of eventNames) {
					let value = this.eventListeners[key];
					if (!Array.isArray(value)) this.element.addEventListener(eventName, value);
					else for (let f of value) this.element.addEventListener(eventName, f);
				}
			}
		}
		if (instantiate) {
			if (instantiate === true) {
				// console.log(this.element)
				this.instance = UIBuilder.initComponents(null, this.element, data);
			}
		}
	}
	getInstance() {
		return this.instance;
	}

	instantiate() {
		this.instance = UIBuilder.initComponents(null, this.element, this.data);

	}

	get() { return this.element; }

	defineState(stateName, newState) {
		if (!this.states.hasOwnProperty(stateName)) this.states[stateName] = newState;
		else if (stateName === 'default') console.error('ComponentElement-defineState() ERROR: State `default` is reserved for usage in costructor.');
		else console.error('ComponentElement-defineState() ERROR: ', stateName, ' already exists!');
		return this;
	}

	_putState(stateName) {
		if (this.states[stateName].attributes) { for (let attribute in this.states[stateName].attributes) this.element.setAttribute(attribute, this.states[stateName].attributes[attribute]) };
		if (this.states[stateName].classList) { for (let c of this.states[stateName].classList) this.element.classList.add(c) };
		if (this.states[stateName].style) { for (let property in this.states[stateName].style) this.element.style[property] = this.states[stateName].style[property] };
	}

	_removeState(stateName) {
		if (this.states[stateName].attributes) { for (let attribute in this.states[stateName].attributes) this.element.removeAttribute(attribute) };
		if (this.states[stateName].classList) { for (let c of this.states[stateName].classList) this.element.classList.remove(c) };
		if (this.states[stateName].style) { for (let property in this.states[stateName].style) this.element.style[property] = "initial" };
	}

	switchToState(stateName) {

		if (this.states.hasOwnProperty(stateName)) {
			if (this.currentState) {
				//Always keep default state's properties
				if (this.currentState !== 'default') this._removeState(this.currentState);
				this._putState(stateName);
			}
			this.currentState = stateName;
		} else console.error('ComponentElement-switchState() ERROR: State ', stateName, ' doesn\'t exist!');
		return this;
	}


	//----- Hacks -----
	//Shortcuts that relay methods to their mirror on the actual DOM element
	//TODO:(?) Make it so that all methods by default are relayed and only the ones above are called from this class
	//Maybe use Proxy() ?
	addEventListener(name, f) { this.element.addEventListener(name, f) }
	remove() { this.element.remove(); }
	append(el) {
		if (el instanceof ComponentElement) this.element.append(el.get()); //makes things easier..
		else this.element.append(el);
	} //in Modal's case, a custom append is also implemented by the UIComponentModal class...

	before(el) {
		if (el instanceof ComponentElement) el.get().before(this.element); //makes things easier..
		else el.before(this.element);
	}

	appendTo(el) {
		el.append(this.element);
		return this;
	}


	focus() { this.element.focus() }
	blur() { this.element.blur() }

}

module.exports = ComponentElement;